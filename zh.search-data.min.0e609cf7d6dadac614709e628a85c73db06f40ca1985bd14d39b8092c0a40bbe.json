[{"id":0,"href":"/zh/posts/ssh_%E5%A4%9A%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/","title":"SSH 多账户管理","section":"Posts","content":"如何用 SSH 密钥在一台机器上管理多个 GitHub 账户 #    https://www.freecodecamp.org/news/manage-multiple-github-accounts-the-ssh-way-2dadc30ccaca/  1. Generating the SSH keys #  Before generating an SSH key, we can check to see if we have any existing SSH keys: ls -al ~/.ssh This will list out all existing public and private key pairs, if any. If ~/.ssh/id_rsa is available, we can reuse it, or else we can first generate a key to the default ~/.ssh/id_rsa by running:\nssh-keygen -t rsa When asked for the location to save the keys, accept the default location by pressing enter. A private key and public key ~/.ssh/id_rsa.pub will be created at the default ssh location ~/.ssh/.\nLet’s use this default key pair for our personal account.\nFor the work accounts, we will create different SSH keys. The below code will generate the SSH keys, and saves the public key with the tag “email@work_mail.com” to ~/.ssh/id_rsa_work_user1.pub\n$ ssh-keygen -t rsa -C \u0026quot;email@work_mail.com\u0026quot; -f \u0026quot;id_rsa_work_user1\u0026quot; We have two different keys created:\n~/.ssh/id_rsa ~/.ssh/id_rsa_work_user1 2. Adding the new SSH key to the corresponding GitHub account #  We already have the SSH public keys ready, and we will ask our GitHub accounts to trust the keys we have created. This is to get rid of the need for typing in the username and password every time you make a Git push.\nCopy the public key pbcopy \u0026lt; ~/.ssh/id_rsa.pub and then log in to your personal GitHub account:\nGo to Settings Select SSH and GPG keys from the menu to the left. Click on New SSH key, provide a suitable title, and paste the key in the box below Click Add key — and you’re done! For the work accounts, use the corresponding public keys (pbcopy \u0026lt; ~/.ssh/id_rsa_work_user1.pub) and repeat the above steps in your GitHub work accounts.\n3 . Registering the new SSH Keys with the ssh-agent #  To use the keys, we have to register them with the ssh-agent on our machine. Ensure ssh-agent is running using the command eval \u0026ldquo;$(ssh-agent -s)\u0026rdquo;.\nAdd the keys to the ssh-agent like so:\nssh-add ~/.ssh/id_rsa ssh-add ~/.ssh/id_rsa_work_user1 Make the ssh-agent use the respective SSH keys for the different SSH Hosts.\nThis is the crucial part, and we have two different approaches:\nUsing the SSH configuration file (Step 4), and having only one active SSH key in the ssh-agent at a time (Step 5).\n4. Creating the SSH config File #  Here we are actually adding the SSH configuration rules for different hosts, stating which identity file to use for which domain.\nThe SSH config file will be available at ~/.ssh/config. Edit it if it exists, or else we can just create it.\n$ cd ~/.ssh/ $ touch config // Creates the file if not exists $ code config // Opens the file in VS code, use any editor Make configuration entries for the relevant GitHub accounts similar to the one below in your ~/.ssh/config file:\n# Personal account, - the default config Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa # Work account-1 Host github.com-work_user1 HostName github.com User git IdentityFile ~/.ssh/id_rsa_work_user1 “work_user1” is the GitHub user id for the work account.\n“github.com-work_user1” is a notation used to differentiate the multiple Git accounts. You can also use “work_user1.github.com” notation as well. Make sure you’re consistent with what hostname notation you use. This is relevant when you clone a repository or when you set the remote origin for a local repository\nThe above configuration asks ssh-agent to:\nUse id_rsa as the key for any Git URL that uses @github.com Use the id_rsa_work_user1 key for any Git URL that uses @github.com-work_user1\n5. One active SSH key in the ssh-agent at a time #  This approach doesn’t require the SSH config rules. Rather we manually ensure that the ssh-agent has only the relevant key attached at the time of any Git operation.\nssh-add -l will list all the SSH keys attached to the ssh-agent. Remove all of them and add the one key you are about to use.\nIf it’s to a personal Git account that you are about to push:\n$ ssh-add -D //removes all ssh entries from the ssh-agent $ ssh-add ~/.ssh/id_rsa // Adds the relevant ssh key The ssh-agent now has the key mapped with the personal GitHub account, and we can do a Git push to the personal repository.\nTo push to your work GitHub account-1, change the SSH key mapped with the ssh-agent by removing the existing key and adding the SSH key mapped with the GitHub work account.\n$ ssh-add -D $ ssh-add ~/.ssh/id_rsa_work_user1 The ssh-agent at present has the key mapped with the work Github account, and you can do a Git push to the work repository. This requires a bit of manual effort, though.\nSetting the git remote Url for the local repositories #  Once we have local Git repositories cloned /created, ensure the Git config user name and email is exactly what you want. GitHub identifies the author of any commit from the email id attached with the commit description.\nTo list the config name and email in the local Git directory, do git config user.name and git config user.email. If it’s not found, update accordingly.\ngit config user.name \u0026quot;User 1\u0026quot; // Updates git config user name git config user.email \u0026quot;user1@workMail.com\u0026quot; 6. While Cloning Repositories #  Note: step 7 will help, if we have the repository already available on local.\nNow that the configurations are in place, we can go ahead and clone the corresponding repositories. On cloning, make a note that we use the host names that we used in the SSH config.\nRepositories can be cloned using the clone command Git provides:\ngit clone git@github.com:personal_account_name/repo_name.git The work repository will require a change to be made with this command:\ngit clone git@github.com-work_user1:work_user1/repo_name.git This change is made depending on the host name defined in the SSH config. The string between @ and : should match what we have given in the SSH config file.\n7. For Locally Existing Repositories #  If we have the repository already cloned:\nList the Git remote of the repository, git remote -v\nCheck whether the URL matches our GitHub host to be used, or else update the remote origin URL.\ngit remote set-url origin git@github.com-worker_user1:worker_user1/repo_name.git Ensure the string between @ and : matches the Host we have given in the SSH config.\nIf you are creating a new repository on local:\nInitialize Git in the project folder git init.\nCreate the new repository in the GitHub account and then add it as the Git remote to the local repository.\ngit remote add origin git@github.com-work_user1:work_user1/repo_name.git Ensure the string between @ and : matches the Host we have given in the SSH config. Push the initial commit to the GitHub repository:\ngit add . git commit -m \u0026quot;Initial commit\u0026quot; git push -u origin master We are done!\nAdding or updating the Git remote of the local Git directory with the proper host will take care of selecting the correct SSH key to verify our identity with GitHub. With all the above in place, our git operations should work seamlessly.\n"}]